{
  "ERR10000": {
    "statusCode": 401,
    "code": "ERR10000",
    "message": "INVALID_AUTH_TOKEN",
    "description": "Incorrect signature or malformed token in authorization header"
  },
  "ERR10001": {
    "statusCode": 401,
    "code": "ERR10001",
    "message": "AUTH_TOKEN_EXPIRED",
    "description": "Jwt token in authorization header expired"
  },
  "ERR10002": {
    "statusCode": 401,
    "code": "ERR10002",
    "message": "MISSING_AUTH_TOKEN",
    "description": "No Authorization header or the token is not bearer type"
  },
  "ERR10003": {
    "statusCode": 401,
    "code": "ERR10003",
    "message": "INVALID_SCOPE_TOKEN",
    "description": "Incorrect signature or malformed token in X-Scope-Token header"
  },
  "ERR10004": {
    "statusCode": 401,
    "code": "ERR10004",
    "message": "SCOPE_TOKEN_EXPIRED",
    "description": "Jwt token in X-Scope-Token expired"
  },
  "ERR10005": {
    "statusCode": 403,
    "code": "ERR10005",
    "message": "AUTH_TOKEN_SCOPE_MISMATCH",
    "description": "Scopes in authorization token and spec scopes are not matched"
  },
  "ERR10006": {
    "statusCode": 403,
    "code": "ERR10006",
    "message": "SCOPE_TOKEN_SCOPE_MISMATCH",
    "description": "Scopes in scope token and spec scopes are not matched"
  },
  "ERR10007": {
    "statusCode": 404,
    "code": "ERR10007",
    "message": "INVALID_REQUEST_PATH",
    "description": "Request path cannot be found in the spec."
  },
  "ERR10008": {
    "statusCode": 405,
    "code": "ERR10008",
    "message": "METHOD_NOT_ALLOWED",
    "description": "Request method cannot be found in the spec."
  },
  "ERR10009": {
    "statusCode": 408,
    "code": "ERR10009",
    "message": "CLIENT_CREDENTIALS_TOKEN_NOT_AVAILABLE",
    "description": "Could not get client credentials token in client module"
  },
  "ERR10010": {
    "statusCode": 500,
    "code": "ERR10010",
    "message": "RUNTIME_EXCEPTION",
    "description": "Unexpected runtime exception"
  },
  "ERR10011": {
    "statusCode": 400,
    "code": "ERR10011",
    "message": "UNCAUGHT_EXCEPTION",
    "description": "Uncaught exception"
  },
  "ERR10012": {
    "statusCode": 400,
    "code": "ERR10012",
    "message": "MISSING_SWAGGER_OPERATION",
    "description": "SwaggerHandler or JwtVerifyHandler needs to be enabled"
  },
  "ERR10013": {
    "statusCode": 404,
    "code": "ERR10013",
    "message": "SERVER_INFO_DISABLED",
    "description": "Server info handler is disabled in info.json"
  },
  "ERR10014": {
    "statusCode": 400,
    "code": "ERR10014",
    "message": "GENERIC_EXCEPTION",
    "description": "Generic Exception %s."
  },

  "ERR11000": {
    "statusCode": 400,
    "code": "ERR11000",
    "message": "VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING",
    "description": "Query parameter '%s' is required on path '%s' but not found in request."
  },
  "ERR11001": {
    "statusCode": 400,
    "code": "ERR11001",
    "message": "VALIDATOR_REQUEST_PARAMETER_MISSING",
    "description": "Parameter '%s' is required but is missing."
  },
  "ERR11002": {
    "statusCode": 400,
    "code": "ERR11002",
    "message": "VALIDATOR_REQUEST_PARAMETER_ENUM_INVALID",
    "description": "Value '%s' for parameter '%s' is not allowed. Allowed values are <%s>."
  },
  "ERR11003": {
    "statusCode": 400,
    "code": "ERR11003",
    "message": "VALIDATOR_SCHEMA_INVALID_JSON",
    "description": "Unable to parse JSON - %s"
  },
  "ERR11004": {
    "statusCode": 400,
    "code": "ERR11004",
    "message": "VALIDATOR_SCHEMA",
    "description": "Schema Validation Error - %s"
  },
  "ERR11005": {
    "statusCode": 400,
    "code": "ERR11005",
    "message": "VALIDATOR_REQUEST_PARAMETER_COLLECTION_INVALID_FORMAT",
    "description": "Parameter '%s' expected collection format of '%s' but '%s' was used instead."
  },
  "ERR11006": {
    "statusCode": 400,
    "code": "ERR11006",
    "message": "VALIDATOR_REQUEST_PARAMETER_COLLECTION_TOO_MANY_ITEMS",
    "description": "Parameter '%s' accepts a maximum of %d items. Found %d."
  },
  "ERR11007": {
    "statusCode": 400,
    "code": "ERR11007",
    "message": "VALIDATOR_REQUEST_PARAMETER_COLLECTION_TOO_FEW_ITEMS",
    "description": "Parameter '%s' accepts a minimum of %d items. Found %d."
  },
  "ERR11008": {
    "statusCode": 400,
    "code": "ERR11008",
    "message": "VALIDATOR_REQUEST_PARAMETER_COLLECTION_DUPLICATE_ITEMS",
    "description": "Parameter '%s' does not allow duplicate values."
  },
  "ERR11009": {
    "statusCode": 400,
    "code": "ERR11009",
    "message": "VALIDATOR_REQUEST_PARAMETER_ENUM_INVALID",
    "description": "Value '%s' for parameter '%s' is not allowed. Allowed values are <%s>."
  },
  "ERR11010": {
    "statusCode": 400,
    "code": "ERR11010",
    "message": "VALIDATOR_REQUEST_PARAMETER_INVALID_FORMAT",
    "description": "Value '%s' for parameter '%s' does not match type '%s' with format '%s'."
  },
  "ERR11011": {
    "statusCode": 400,
    "code": "ERR11011",
    "message": "VALIDATOR_REQUEST_PARAMETER_NUMBER_BELOW_MIN",
    "description": "Value '%s' for parameter '%s' less than allowed min value %f."
  },
  "ERR11012": {
    "statusCode": 400,
    "code": "ERR11012",
    "message": "VALIDATOR_REQUEST_PARAMETER_NUMBER_ABOVE_MAX",
    "description": "Value '%s' for parameter '%s' greater than allowed max value %f."
  },
  "ERR11013": {
    "statusCode": 400,
    "code": "ERR11013",
    "message": "VALIDATOR_REQUEST_BODY_UNEXPECTED",
    "description": "No request body is expected for %s on path '%s'."
  },
  "ERR11014": {
    "statusCode": 400,
    "code": "ERR11014",
    "message": "VALIDATOR_REQUEST_BODY_MISSING",
    "description": "%s on path '%s' requires a request body. None found."
  },
  "ERR11015": {
    "statusCode": 400,
    "code": "ERR11015",
    "message": "VALIDATOR_RESPONSE_STATUS_UNKNOWN",
    "description": "Response status %d not defined for path '%s'."
  },
  "ERR11016": {
    "statusCode": 400,
    "code": "ERR11016",
    "message": "VALIDATOR_RESPONSE_BODY_MISSING",
    "description": "%s on path '%s' defines a response schema but no response body found."
  },
  "ERR11017": {
    "statusCode": 400,
    "code": "ERR11017",
    "message": "VALIDATOR_REQUEST_PARAMETER_HEADER_MISSING",
    "description": "Header parameter '%s' is required on path '%s' but not found in request."
  },

  "ERR12000": {
    "statusCode": 400,
    "code": "ERR12000",
    "message": "UNABLE_TO_PARSE_FORM_DATA",
    "description": "Unable to parse x-www-form-urlencoded form data."
  },
  "ERR12001": {
    "statusCode": 400,
    "code": "ERR12001",
    "message": "UNSUPPORTED_GRANT_TYPE",
    "description": "Unsupported grant type %s. Only authorization_code and client_credentials are supported."
  },
  "ERR12002": {
    "statusCode": 401,
    "code": "ERR12002",
    "message": "MISSING_AUTHORIZATION_HEADER",
    "description": "Missing authorization header. client credentials must be passed in as Authorization header."
  },
  "ERR12003": {
    "statusCode": 401,
    "code": "ERR12003",
    "message": "INVALID_AUTHORIZATION_HEADER",
    "description": "Invalid authorization header %s. Basic authentication with credentials is required."
  },
  "ERR12004": {
    "statusCode": 401,
    "code": "ERR12004",
    "message": "INVALID_BASIC_CREDENTIALS",
    "description": "Invalid Basic credentials %s."
  },
  "ERR12005": {
    "statusCode": 400,
    "code": "ERR12005",
    "message": "JSON_PROCESSING_EXCEPTION",
    "description": "Json Processing Excepiton %s."
  },
  "ERR12006": {
    "statusCode": 404,
    "code": "ERR12006",
    "message": "CLIENT_ID_NOTFOUND",
    "description": "Client Id not found %s."
  },
  "ERR12007": {
    "statusCode": 401,
    "code": "ERR12007",
    "message": "UNAUTHORIZED_CLIENT",
    "description": "Unauthorized client with wrong client secret."
  },
  "ERR12008": {
    "statusCode": 401,
    "code": "ERR12008",
    "message": "INVALID_AUTHORIZATION_CODE",
    "description": "Invalid Authorization Code %s."
  },
  "ERR12009": {
    "statusCode": 401,
    "code": "ERR12009",
    "message": "INVALID_CODE_REQUEST",
    "description": "Invalid authorization code request. responseType and client_id are required."
  },
  "ERR12010": {
    "statusCode": 401,
    "code": "ERR12010",
    "message": "INVALID_RESPONSE_TYPE",
    "description": "Invalid response type %s. Ony code is allowed."
  }

}
