package com.networknt.oauth.user.handler;

import com.networknt.client.Client;
import com.networknt.utility.HashUtil;
import com.networknt.oauth.user.PathHandlerProvider;
import com.networknt.server.Server;
import com.networknt.exception.ClientException;
import com.networknt.exception.ApiException;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.*;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Map;

/**
* Generated by swagger-codegen
*/
public class Oauth2PasswordUserIdPostHandlerTest {
    @ClassRule
    public static TestServer server = TestServer.getInstance();

    static final Logger logger = LoggerFactory.getLogger(Oauth2PasswordUserIdPostHandlerTest.class);

    @Test
    public void testIncorrectPassword() throws ClientException, ApiException, UnsupportedEncodingException {
        String password = "{\"password\":\"111111\",\"newPassword\":\"stevehu\",\"newPasswordConfirm\":\"partner\"}";
        CloseableHttpClient client = Client.getInstance().getSyncClient();
        HttpPost httpPost = new HttpPost("http://localhost:6885/oauth2/password/admin");
        httpPost.setHeader("Content-type", "application/json");
        httpPost.setEntity(new StringEntity(password));
        try {
            CloseableHttpResponse response = client.execute(httpPost);
            logger.debug("StatusCode = " + response.getStatusLine().getStatusCode());
            Assert.assertEquals(401, response.getStatusLine().getStatusCode());
            String body = IOUtils.toString(response.getEntity().getContent(), "utf8");
            logger.debug("Response body = " + body);
            Assert.assertTrue(body.contains("INCORRECT_PASSWORD"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testUnmatchedPassword() throws ClientException, ApiException, UnsupportedEncodingException {
        String password = "{\"password\":\"123456\",\"newPassword\":\"stevehu\",\"newPasswordConfirm\":\"partner\"}";
        CloseableHttpClient client = Client.getInstance().getSyncClient();
        HttpPost httpPost = new HttpPost("http://localhost:6885/oauth2/password/admin");
        httpPost.setHeader("Content-type", "application/json");
        httpPost.setEntity(new StringEntity(password));
        try {
            CloseableHttpResponse response = client.execute(httpPost);
            logger.debug("StatusCode = " + response.getStatusLine().getStatusCode());
            Assert.assertEquals(400, response.getStatusLine().getStatusCode());
            String body = IOUtils.toString(response.getEntity().getContent(), "utf8");
            logger.debug("Response body = " + body);
            Assert.assertTrue(body.contains("PASSWORD_PASSWORDCONFIRM_NOT_MATCH"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testResetPassword() throws ClientException, ApiException, UnsupportedEncodingException {
        String password = "{\"password\":\"123456\",\"newPassword\":\"stevehu\",\"newPasswordConfirm\":\"stevehu\"}";
        CloseableHttpClient client = Client.getInstance().getSyncClient();
        HttpPost httpPost = new HttpPost("http://localhost:6885/oauth2/password/admin");
        httpPost.setHeader("Content-type", "application/json");
        httpPost.setEntity(new StringEntity(password));
        try {
            CloseableHttpResponse response = client.execute(httpPost);
            logger.debug("StatusCode = " + response.getStatusLine().getStatusCode());
            Assert.assertEquals(200, response.getStatusLine().getStatusCode());
            String body = IOUtils.toString(response.getEntity().getContent(), "utf8");
            logger.debug("Response body = " + body);
            Map<String, Object> user = (Map<String, Object>)PathHandlerProvider.users.get("admin");
            boolean match = HashUtil.validatePassword("stevehu", (String)user.get("password"));
            Assert.assertTrue(match);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
